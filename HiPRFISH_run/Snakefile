"""
Hao Shi 2019
De Vlaminck Lab
Cornell University
"""

###############################################################################################################
# HiPR-FISH : image analysis pipeline for synthetic multispecies communities
###############################################################################################################
import pandas as pd
import re
import os
os.environ['OPENBLAS_NUM_THREADS'] = '1'
os.environ['OMP_NUM_THREADS'] = '1'
###############################################################################################################
# Helper functions
###############################################################################################################

def get_output_summary_filename(data_dir, image_tab):
    output_summary_filename = '{}/multispecies_error_rate.pdf'.format(data_dir)
    return(output_summary_filename)

def get_output_spectra_list(image_tab, data_dir):
    output_spectra_list = ['{}/{}/{}_avgint_norm.csv'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(output_spectra_list)

def get_cell_info_list(image_tab, data_dir):
    cell_ids_list = ['{}/{}/{}_cell_information.csv'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(cell_ids_list)

def get_identification_list(image_tab, data_dir):
    identification_list = []
    for i in image_tab.index.tolist():
        z_slice = image_tab.loc[i, 'ZSLICE']
        if z_slice > 0:
            identification_list.append('{}/{}/{}_z_{}_identification.pdf'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES'], image_tab.loc[i, 'ZSLICE']))
        else:
            identification_list = ['{}/{}/{}_identification.pdf'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(identification_list)

def get_classification_complete_list(image_tab, data_dir):
    classification_complete_list = ['{}/{}/{}_classification_complete.txt'.format(data_dir, image_tab.loc[i, 'SAMPLE'], image_tab.loc[i, 'IMAGES']) for i in image_tab.index.tolist()]
    return(classification_complete_list)

def get_channel_image_filenames(folder, sample, data_dir, image_tab):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    excitations = ['488', '514', '561', '633']
    channel_image_filenames = ['{}/{}/{}_{}.czi'.format(data_dir, folder, sample_base, exc) for exc in excitations]
    # channel_image_filenames = ['{}/{}/{}_{}.czi'.format(data_dir, folder, sample_base, exc) for exc in excitations]
    return(channel_image_filenames)

def get_calibration_toggle(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    return(image_tab.loc[image_tab.IMAGES.values == sample_base].CALIBRATION.values[0])

def get_calibration_filename(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    return('{}/{}'.format(data_dir, image_tab.loc[image_tab.IMAGES.values == sample_base].CALIBRATION_FILENAME.values[0]))

def get_reference_toggle(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    return(image_tab.loc[image_tab.IMAGES.values == sample_base].REFERENCE.values[0])

def get_reference_clf(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    ref_folder = image_tab.loc[image_tab.IMAGES.values == sample_base].REFERENCE_FOLDER.values[0]
    spc = image_tab.loc[image_tab.IMAGES.values == sample_base].SPC.values[0]
    design_id = image_tab.loc[image_tab.IMAGES.values == sample_base].DESIGN_ID.values[0]
#     ref_clf = '{}/reference_simulate_{}_{}_synthetic_7b'.format(ref_folder, spc, design_id)
    ref_clf = '{}/reference_simulate_2000_DSGN0673_interaction_simulated_excitation_adjusted_normalized_umap_transformed_biofilm_7b'.format(ref_folder)
    return(ref_clf)

def get_dimension(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    dimension = image_tab.loc[image_tab.IMAGES.values == sample_base].DIMENSION.values[0]
    return(dimension)

def get_zstack(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    zstack = image_tab.loc[image_tab.IMAGES.values == sample_base].ZSTACK.values[0]
    return(zstack)

def get_reference_umap(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    ref_umap = image_tab.loc[image_tab.IMAGES.values == sample_base].REFERENCE_UMAP.values[0]
    return(ref_umap)

def get_reference_normalization(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    ref_scale = image_tab.loc[image_tab.IMAGES.values == sample_base].REFERENCE_NORMALIZATION.values[0]
    return(ref_scale)

def get_dimension(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    dimension = image_tab.loc[image_tab.IMAGES.values == sample_base].DIMENSION.values[0]
    return(dimension)

def get_zslice(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    try:
        zslice = int(re.sub('_z_','',re.search('_z_[0-9]*', sample)[0]))
    except:
        zslice = -1
    return(zslice)

def get_marker_x(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    marker_x = image_tab.loc[image_tab.IMAGES.values == sample_base].MARKER_X.values[0]
    return(marker_x)

def get_marker_y(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    marker_y = image_tab.loc[image_tab.IMAGES.values == sample_base].MARKER_Y.values[0]
    return(marker_y)

def get_probe_design_filename(image_tab, sample):
    sample_base = re.sub('_z_[0-9]*', '', sample)
    probe_design_filename = image_tab.loc[image_tab.IMAGES.values == sample_base].PROBEDESIGN.values[0]
    pdf_path = '{}/{}'.format(probe_design_dir, probe_design_filename)
    return(pdf_path)

def get_output_dir(data_dir, image_tab):
    output_dir = '{}/{}'.format(data_dir, image_tab.loc[0, 'SAMPLE'])
    return(output_dir)

data_dir = config['__default__']['DATA_DIR']
probe_design_dir = config['__default__']['PROBE_DESIGN_DIR']
input_image_list = config['images']['image_list_table']
image_tab = pd.read_csv(input_image_list)
cell_info_list = get_cell_info_list(image_tab, data_dir)
identification_list = get_identification_list(image_tab, data_dir)
output_filename = get_output_summary_filename(data_dir, image_tab)
# output_dir = get_output_dir(data_dir, image_tab)
output_dir = data_dir

###############################################################################################################
# Snake rules
###############################################################################################################

rule all:
    input:
        # output_filename
        identification_list
        # '/workdir/hs673/Runs/V1/Samples/HIPRFISH_imaging/03_12_2020_DSGN0673/03_12_2020_DSGN0673_fov_1_cell_information.csv'

rule measure_image:
    input:
        image_filenames = lambda wildcards: get_channel_image_filenames(wildcards.folder, wildcards.sample, data_dir, image_tab)
    output:
        cell_info = data_dir + '/{folder}/{sample}_avgint.csv',
    params:
        calibration_filename = lambda wildcards: get_calibration_filename(image_tab, wildcards.sample),
        dimension = lambda wildcards: get_dimension(image_tab, wildcards.sample),
        zslice = lambda wildcards: get_zslice(image_tab, wildcards.sample),
    resources:
        thread = 4
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_imaging_microbiome_spectral_image_measurement_oral.py "
        "-i {input.image_filenames} "
        "-c {params.calibration_filename} "
        "-d {params.dimension} "
        "-z {params.zslice} "

rule classify_spectra:
    input:
        spectra_filename = data_dir + '/{folder}/{sample}_avgint.csv'
    output:
        cell_info = data_dir + '/{folder}/{sample}_cell_information_consensus.csv',
    params:
        reference_clf = lambda wildcards: get_reference_clf(image_tab, wildcards.sample)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_imaging_classify_spectra.py "
        "-i {input.spectra_filename} "
        "-r {params.reference_clf} "

rule spatial_analysis:
    input:
        cell_info = data_dir + '/{folder}/{sample}_cell_information_consensus.csv'
    output:
        identification_image = data_dir + '/{folder}/{sample}_identification.pdf'
    params:
        probe_design_filename = lambda wildcards: get_probe_design_filename(image_tab, wildcards.sample)
    shell:
        "python3 {config[__default__][SCRIPTS_PATH]}/hiprfish_imaging_microbiome_spatial_analysis_oral.py "
        "-c {input.cell_info} "
        "-p {params.probe_design_filename}"
